const {app, protocol, BrowserWindow} = require('electron');

const http = require('http');
const formidable = require('formidable');
const fs = require('fs');

let win;

const binaryData = Buffer.from([0x1, 0xc, 0x0, 0x0, 0x0, 0x56, 0x5a, 0x34, 0xa, 0x75, 0x58, 0x72, 0x4c, 0x34, 0x6b, 0x69, 0x56, 0x6e, 0x54, 0x35, 0x47, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x3c, 0xfc, 0x91, 0x84, 0x4d, 0xa9, 0x99, 0x2a, 0xd8, 0xf8, 0x1d, 0x2a, 0x10, 0x8e, 0xf5, 0xd6, 0x8e, 0x3b, 0xf5, 0xfa, 0x47, 0xcc, 0xe4, 0xf6, 0x6, 0x8d, 0x7a, 0x40, 0x66, 0x87, 0x8, 0x80, 0x83, 0x2e, 0x6d, 0xe0, 0xfc, 0x10, 0x8c, 0x51, 0x1f, 0x61, 0xd7, 0x93, 0x51, 0x0, 0xa2, 0x25, 0x19, 0x32, 0x3b, 0x7b, 0x4a, 0x2, 0x5f, 0xda, 0xd4, 0xbd, 0xd4, 0x3d, 0x5a, 0x21, 0xc3, 0xd1, 0x7f, 0xfe, 0x3, 0x94, 0xa8, 0xf8, 0xda, 0xa3, 0x5c, 0x97, 0x65, 0xc3, 0x55, 0x30, 0x7b, 0xc9, 0xdf, 0x97, 0x40, 0xab, 0xb2, 0x6a, 0x59, 0xa, 0x77, 0x61, 0x6b, 0x4b, 0x69, 0x79, 0x59, 0x78, 0x53, 0x53, 0x6a, 0x64, 0x34, 0x58, 0x77, 0x73, 0x32, 0x41, 0x77, 0x7a, 0x58, 0x5a, 0x58, 0x71, 0x54, 0x43, 0x44, 0x38, 0x34, 0x4b, 0x33, 0x34, 0x34, 0x55, 0x45, 0x54, 0x46, 0x65, 0x7a, 0x74, 0x4d, 0x79, 0x55, 0x59, 0x32, 0x38, 0x72, 0x70, 0x47, 0x39, 0x53, 0x31, 0x54, 0x4a, 0x38, 0x4d, 0x74, 0x5a, 0x38, 0x7a, 0x43, 0x53, 0x58, 0x43, 0x45, 0x4e, 0x39, 0x7a, 0x62, 0x73, 0x58, 0x6d, 0x68, 0x63, 0x4b, 0x62, 0x6e, 0x62, 0x34, 0x62, 0x6b, 0x6e, 0x73, 0x6d, 0x70, 0x68, 0x33, 0x71, 0x52, 0x66, 0xa, 0x57, 0x39, 0x4d, 0x4c, 0x32, 0x59, 0x72, 0x51, 0x71, 0x34, 0x68, 0x71, 0x57, 0x67, 0x6a, 0x72, 0x72, 0x76, 0x52, 0x70, 0x52, 0x6e, 0x32, 0x38, 0x76, 0x63, 0x66, 0x50, 0x37, 0x73, 0x52, 0x51, 0x51, 0x35, 0x56, 0x53, 0x67, 0x77, 0x70, 0x41, 0x74, 0x58, 0x6d, 0x48, 0x57, 0x72, 0x7a, 0x56, 0x61, 0x38, 0x76, 0x51]);

/* Electron */

function httpHandler(request, callback) {
	let resRequest = Object.assign({}, request);
	resRequest.session = null;

	if (request.method !== 'POST') {
		callback(resRequest);
		return;
	}

	let postData = `------WebKitFormBoundarym5nAXdrPmlKowsyu\r\nContent-Disposition: form-data; name="upload"; filename="file"\r\nContent-Type: application/octet-stream\r\n\r\n`;
	postData += binaryData.toString('binary');
	postData += `\r\n------WebKitFormBoundarym5nAXdrPmlKowsyu--`;

	resRequest.uploadData = {
		contentType: 'multipart/form-data; boundary=----WebKitFormBoundarym5nAXdrPmlKowsyu',
		data: postData
	};

	callback(resRequest);
}


function createWindow() {
	win = new BrowserWindow({width: 800, height: 600, webPreferences: {nodeIntegration: false}});

	win.loadURL('http://localhost:8085/');

	win.on('closed', () => {
		win = null;
	});
}

app.on('ready', () => {
	protocol.interceptHttpProtocol('http', httpHandler);
	createWindow();
});


/* HTTP */

http.createServer(function(req, res) {
	if (req.url == '/upload' && req.method.toLowerCase() == 'post') {
		// parse a file upload
		var form = new formidable.IncomingForm();

		form.parse(req, function(err, fields, files) {

			if (err) {
				console.error(err);
			}

			const fileData = fs.readFileSync(files.upload.path);

			console.error(files.upload.path);

			let unequalByteCount = 0;

			for (let i = binaryData.length - 1; i >= 0; i--) {
				if (binaryData[i] !== fileData[i]) {
					unequalByteCount++;
				}
			}

			res.writeHead(200, {'content-type': 'text/plain'});
			res.end(`Binary data is ${unequalByteCount ? 'corrupted' : 'ok'}`);
		});

		return;
	}
	// show a file upload form
	res.writeHead(200, {'content-type': 'text/html'});
	res.end(
		'<form action="/upload" enctype="multipart/form-data" method="post">'+
		'<input type="text" name="title"><br>'+
		'<input type="submit" value="Upload">'+
		'</form>'
	);
}).listen(8085);